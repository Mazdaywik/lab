//FROM LibraryEx
$EXTERN Fetch;

//FROM Error
$EXTERN ReportError-BadExpand, ReportError-BadToken;

//FROM Position
$EXTERN ConcatFragments;

$ENTRY Parse {
  s.Table s.Axiom e.Tokens =
    <DoParse
      // Таблица
      s.Table
      // Стек
      ((#AXIOM 0) #NT s.Axiom #T #EOF)
      // Поток токенов
      (e.Tokens)
    >;
}

DoParse {
  s.Table e.Stack ((e.Scanned) #NT s.NonTerminal e.Rule)
  ((s.Token t.Fragment e.Attrib) e.Tokens) =
    <Fetch
      <<s.Table s.NonTerminal> s.Token> {
        #ERROR =
          <ReportError-BadExpand s.NonTerminal s.Token t.Fragment e.Attrib>;

        s.AltTag e.SubRule =
          <DoParse
            s.Table
            e.Stack
            ((e.Scanned) e.Rule)
            ((s.NonTerminal s.AltTag) e.SubRule)
            ((s.Token t.Fragment e.Attrib) e.Tokens)
          >;
      }
    >;

  s.Table e.Stack ((e.Scanned) #T s.Terminal e.Rule)
  ((s.Terminal t.Fragment e.Attrib) e.Tokens) =
    <DoParse
      s.Table
      e.Stack
      ((e.Scanned (s.Terminal t.Fragment #T e.Attrib)) e.Rule)
      (e.Tokens)
    >;

  s.Table e.Stack ((e.Scanned) #T s.ExpectedTerminal e.Rule)
  ((s.BadTerminal t.Fragment e.Attrib) e.Tokens) =
    <ReportError-BadToken s.ExpectedTerminal s.BadTerminal t.Fragment e.Attrib>;

  s.Table
  e.Stack
  ((e.Scanned) e.Rule)
  ((s.NonTerminal s.AltTag e.Symbols))
  (e.Tokens) =
    <DoParse
      s.Table
      e.Stack
      ((e.Scanned (s.NonTerminal <SetPosition s.AltTag e.Symbols>)) e.Rule)
      (e.Tokens)
    >;

  s.Table ((#AXIOM 0 t.TopLevelSymbol t.EOF)) (/* кончились токены */) =
    t.TopLevelSymbol;
}

SetPosition {
  s.AltTag /* пусто */ = #NoPosition #NT s.AltTag;

  s.AltTag e.Symbols = <SetPosition-Left s.AltTag () e.Symbols>;
}

SetPosition-Left {
  s.AltTag (e.Scanned) (s.Type #NoPosition s.Kind e.Info) e.Symbols =
    <SetPosition-Left
      s.AltTag (e.Scanned (s.Type #NoPosition s.Kind e.Info)) e.Symbols
    >;

  s.AltTag (e.Scanned) /* пусто */ =
    #NoPosition #NT s.AltTag e.Scanned;

  s.AltTag (e.Scanned) (s.Type t.Fragment s.Kind e.Info) e.Symbols =
    <SetPosition-Right
      s.AltTag t.Fragment
      e.Scanned (s.Type t.Fragment s.Kind e.Info) e.Symbols ()
    >;
}

SetPosition-Right {
  s.AltTag t.LeftPosition
  e.Symbols (s.Type #NoPosition s.Kind e.Info) (e.Scanned) =
    <SetPosition-Right
      s.AltTag t.LeftPosition
      e.Symbols ((s.Type #NoPosition s.Kind e.Info) e.Scanned)
    >;

  s.AltTag t.LeftPosition
  e.Symbols (s.Type t.RightPosition s.Kind e.Info) (e.Scanned) =
    <ConcatFragments t.LeftPosition t.RightPosition>
    #NT s.AltTag e.Symbols (s.Type t.RightPosition s.Kind e.Info) e.Scanned;
}
